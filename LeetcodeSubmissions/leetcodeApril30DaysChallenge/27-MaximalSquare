/*
Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

Example:

Input: 
1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0

Output: 4
*/

class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        if (matrix.empty() || matrix.size()==0)
            return 0;
        int n = matrix.size(), m=matrix[0].size();
        int result = 0, minimum;
        int dp[n][m];
    
        for(int i=0; i<matrix.size(); i++){
            dp[i][0]=matrix[i][0]-'0';
            result=max(result, dp[i][0]);
        }
 
        for(int j=0; j<matrix[0].size(); j++){
            dp[0][j]=matrix[0][j]-'0';
            result=max(result, dp[0][j]);
        }
 
        for(int i=1; i<matrix.size(); i++){
            for(int j=1; j<matrix[0].size(); j++){
                if(matrix[i][j]=='1'){
                    minimum = min(dp[i-1][j], dp[i][j-1]);
                    minimum = min(minimum, dp[i-1][j-1]);
                    dp[i][j]=minimum+1;
 
                    result = max(result, minimum+1);
                } else {
                    dp[i][j]=0;
                }    
            }
        }
        return result*result;
    }
};
